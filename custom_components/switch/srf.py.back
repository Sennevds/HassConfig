import logging

import voluptuous as vol

from homeassistant.components.switch import (SwitchDevice, PLATFORM_SCHEMA)
from homeassistant.const import (CONF_NAME, CONF_SWITCHES)
import homeassistant.helpers.config_validation as cv

REQUIREMENTS = ['pyserial==3.2.1']

_LOGGER = logging.getLogger(__name__)

CONF_DEVICES = 'Device names'
CONF_PORT = 'Port'

SWITCH_SCHEMA = vol.Schema({
    vol.Required(CONF_PIN): cv.positive_int,
    vol.Required(CONF_TYPE): cv.string,
})

PLATFORM_SCHEMA = PLATFORM_SCHEMA.extend({
    vol.Required(CONF_PORT): cv.string,
    vol.Required(CONF_BAUD): cv.port,
    vol.Required(CONF_DEVICES): vol.Schema({cv.string: SWITCH_SCHEMA}),
})


def setup_platform(hass, config, add_devices, discovery_info=None):
    """Setup the SRF component."""
    import serial
    from serial import SerialException
    switches = config.get(CONF_DEVICES)
    try:
        ser = serial.Serial()
        ser.baudrate = config.get(CONF_PORT)
        ser.port = config.get(CONF_BAUD)
    except SerialException:
        _LOGGER.exception("Your port is not accessible.")
        return False
    devices = []
    for dev_name, properties in switches.items():
        devices.append(
            SrfSwitch(
                hass,
                properties.get(CONF_NAME, dev_name),
                ser,
                properties.get(CONF_PIN),
                properties.get(CONF_TYPE)
            )
        )
    if devices:
        ser.open()

    add_devices(devices)


class SrfSwitch(SwitchDevice):
    """Representation of a srf switch."""

    def __init__(self, hass, name, ser, pin, pinType):
        """Initialize the switch."""
        self._hass = hass
        self._name = name
        self._state = False
        self._ser = ser
        self._pin = pin
        self._pinType = pinType

    @property
    def should_poll(self):
        """No polling needed."""
        return False

    @property
    def name(self):
        """Return the name of the switch."""
        return self._name

    @property
    def is_on(self):
        """Return true if device is on."""
        return self._state

    def _send_message(self, device, pin, pinType):
        """Send the code with a specified pulselength."""
        _LOGGER.info("Sending following message: %s to: %s", code)
        res = self._rfdevice.tx_code(code, protocol, pulselength)
        if not res:
            _LOGGER.error("Sending code %s failed", code)
        return res

    def turn_on(self):
        """Turn the switch on."""
        if self._send_code(self._code_on, self._protocol, self._pulselength):
            self._state = True
            self.update_ha_state()

    def turn_off(self):
        """Turn the switch off."""
        if self._send_code(self._code_off, self._protocol, self._pulselength):
            self._state = False
            self.update_ha_state()
